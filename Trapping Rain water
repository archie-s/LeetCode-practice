class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        # If the height list is empty, no water can be trapped
        if not height:
            return 0

        # Number of elements in the height list
        n = len(height)

        # Initialize two arrays to store the max height to the left & right
        left_max = [0] * n
        right_max = [0] * n

        # Fill the left_max array
        left_max[0] = height[0]  # The first element has no left bar, so it is its own max
        for i in range(1, n):
            left_max[i] = max(left_max[i - 1], height[i])  # The max height to the left of i

        # Fill the right_max array
        right_max[n - 1] = height[n - 1]  # The last element has no right bar, so it is its own max
        for i in range(n - 2, -1, -1):
            right_max[i] = max(right_max[i + 1], height[i])  # The max height to the right of i

        # Calculate the trapped water
        water_trapped = 0
        for i in range(n):
            # Water trapped on top of the current bar is determined by the smaller of the
            # max heights to its left and right minus the height of the current bar
            water_trapped += min(left_max[i], right_max[i]) - height[i]

        return water_trapped

# Example usage
solution = Solution()
height1 = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
height2 = [4, 2, 0, 3, 2, 5]

print(solution.trap(height1))  
print(solution.trap(height2)) 
